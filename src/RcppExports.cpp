// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dG1_normal_rcpp
arma::vec dG1_normal_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, double sigma, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_dG1_normal_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(dG1_normal_rcpp(X, Y, n1, alpha, beta, sigma, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// lpL_normal_rcpp
double lpL_normal_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, double sigma, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_lpL_normal_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(lpL_normal_rcpp(X, Y, n1, alpha, beta, sigma, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// dG1alt_normal_rcpp
arma::vec dG1alt_normal_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, double sigma, arma::vec gamma, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_dG1alt_normal_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(dG1alt_normal_rcpp(X, Y, n1, alpha, beta, sigma, gamma, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// lpLalt_normal_rcpp
double lpLalt_normal_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, double sigma, arma::vec gamma, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_lpLalt_normal_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(lpLalt_normal_rcpp(X, Y, n1, alpha, beta, sigma, gamma, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// dG1_logistic_rcpp
arma::vec dG1_logistic_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_dG1_logistic_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(dG1_logistic_rcpp(X, Y, n1, alpha, beta, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// lpL_logistic_rcpp
double lpL_logistic_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_lpL_logistic_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(lpL_logistic_rcpp(X, Y, n1, alpha, beta, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// dG1alt_logistic_rcpp
arma::vec dG1alt_logistic_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, arma::vec gamma, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_dG1alt_logistic_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(dG1alt_logistic_rcpp(X, Y, n1, alpha, beta, gamma, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// lpLalt_logistic_rcpp
double lpLalt_logistic_rcpp(arma::mat X, arma::vec Y, arma::uword n1, double alpha, arma::vec beta, arma::vec gamma, arma::uword iter_max, double stop_tol);
RcppExport SEXP _EPPS_lpLalt_logistic_rcpp(SEXP XSEXP, SEXP YSEXP, SEXP n1SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP iter_maxSEXP, SEXP stop_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type stop_tol(stop_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(lpLalt_logistic_rcpp(X, Y, n1, alpha, beta, gamma, iter_max, stop_tol));
    return rcpp_result_gen;
END_RCPP
}
// eXsq_rcpp
arma::mat eXsq_rcpp(arma::mat data_X);
RcppExport SEXP _EPPS_eXsq_rcpp(SEXP data_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data_X(data_XSEXP);
    rcpp_result_gen = Rcpp::wrap(eXsq_rcpp(data_X));
    return rcpp_result_gen;
END_RCPP
}
// eXsq_w_rcpp
arma::mat eXsq_w_rcpp(arma::mat data_X, arma::vec weight);
RcppExport SEXP _EPPS_eXsq_w_rcpp(SEXP data_XSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data_X(data_XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(eXsq_w_rcpp(data_X, weight));
    return rcpp_result_gen;
END_RCPP
}
// Xsq_lowtri_rcpp
arma::mat Xsq_lowtri_rcpp(arma::mat data_X);
RcppExport SEXP _EPPS_Xsq_lowtri_rcpp(SEXP data_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data_X(data_XSEXP);
    rcpp_result_gen = Rcpp::wrap(Xsq_lowtri_rcpp(data_X));
    return rcpp_result_gen;
END_RCPP
}
// twoXYsym_lowtri_rcpp
arma::mat twoXYsym_lowtri_rcpp(arma::mat data_X, arma::mat data_Y);
RcppExport SEXP _EPPS_twoXYsym_lowtri_rcpp(SEXP data_XSEXP, SEXP data_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data_X(data_XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data_Y(data_YSEXP);
    rcpp_result_gen = Rcpp::wrap(twoXYsym_lowtri_rcpp(data_X, data_Y));
    return rcpp_result_gen;
END_RCPP
}
// ctingP_rcpp
arma::mat ctingP_rcpp(arma::mat Y, arma::mat y);
RcppExport SEXP _EPPS_ctingP_rcpp(SEXP YSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ctingP_rcpp(Y, y));
    return rcpp_result_gen;
END_RCPP
}
// ctingP_uni_rcpp
arma::mat ctingP_uni_rcpp(arma::vec Y, arma::vec y);
RcppExport SEXP _EPPS_ctingP_uni_rcpp(SEXP YSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ctingP_uni_rcpp(Y, y));
    return rcpp_result_gen;
END_RCPP
}
// pinv_rcpp
arma::mat pinv_rcpp(arma::mat M_A);
RcppExport SEXP _EPPS_pinv_rcpp(SEXP M_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M_A(M_ASEXP);
    rcpp_result_gen = Rcpp::wrap(pinv_rcpp(M_A));
    return rcpp_result_gen;
END_RCPP
}
// solve_rcpp
arma::mat solve_rcpp(arma::mat M_A, arma::mat M_B);
RcppExport SEXP _EPPS_solve_rcpp(SEXP M_ASEXP, SEXP M_BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M_A(M_ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M_B(M_BSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_rcpp(M_A, M_B));
    return rcpp_result_gen;
END_RCPP
}
// inv_sympd_rcpp
arma::mat inv_sympd_rcpp(arma::mat M_S);
RcppExport SEXP _EPPS_inv_sympd_rcpp(SEXP M_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M_S(M_SSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_sympd_rcpp(M_S));
    return rcpp_result_gen;
END_RCPP
}
// eigen_rcpp
List eigen_rcpp(arma::mat M_S);
RcppExport SEXP _EPPS_eigen_rcpp(SEXP M_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M_S(M_SSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_rcpp(M_S));
    return rcpp_result_gen;
END_RCPP
}
// chol_rcpp
arma::mat chol_rcpp(arma::mat M_S);
RcppExport SEXP _EPPS_chol_rcpp(SEXP M_SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M_S(M_SSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_rcpp(M_S));
    return rcpp_result_gen;
END_RCPP
}
// GroupSum_rcpp
arma::mat GroupSum_rcpp(arma::mat MM, arma::uvec id);
RcppExport SEXP _EPPS_GroupSum_rcpp(SEXP MMSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(GroupSum_rcpp(MM, id));
    return rcpp_result_gen;
END_RCPP
}
// countAinB_rcpp
arma::vec countAinB_rcpp(arma::vec A, arma::vec B);
RcppExport SEXP _EPPS_countAinB_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(countAinB_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// countAinB_W_rcpp
arma::vec countAinB_W_rcpp(arma::vec A, arma::vec B, arma::vec W);
RcppExport SEXP _EPPS_countAinB_W_rcpp(SEXP ASEXP, SEXP BSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(countAinB_W_rcpp(A, B, W));
    return rcpp_result_gen;
END_RCPP
}
// rankAinB_rcpp
arma::vec rankAinB_rcpp(arma::vec A, arma::vec B);
RcppExport SEXP _EPPS_rankAinB_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rankAinB_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// outer_minus_rcpp
arma::mat outer_minus_rcpp(arma::vec a, arma::vec b);
RcppExport SEXP _EPPS_outer_minus_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_minus_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// outer_plus_rcpp
arma::mat outer_plus_rcpp(arma::vec a, arma::vec b);
RcppExport SEXP _EPPS_outer_plus_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_plus_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// outer_leq_rcpp
arma::mat outer_leq_rcpp(arma::vec a, arma::vec b);
RcppExport SEXP _EPPS_outer_leq_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_leq_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// outer_geq_rcpp
arma::mat outer_geq_rcpp(arma::vec a, arma::vec b);
RcppExport SEXP _EPPS_outer_geq_rcpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_geq_rcpp(a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EPPS_dG1_normal_rcpp", (DL_FUNC) &_EPPS_dG1_normal_rcpp, 8},
    {"_EPPS_lpL_normal_rcpp", (DL_FUNC) &_EPPS_lpL_normal_rcpp, 8},
    {"_EPPS_dG1alt_normal_rcpp", (DL_FUNC) &_EPPS_dG1alt_normal_rcpp, 9},
    {"_EPPS_lpLalt_normal_rcpp", (DL_FUNC) &_EPPS_lpLalt_normal_rcpp, 9},
    {"_EPPS_dG1_logistic_rcpp", (DL_FUNC) &_EPPS_dG1_logistic_rcpp, 7},
    {"_EPPS_lpL_logistic_rcpp", (DL_FUNC) &_EPPS_lpL_logistic_rcpp, 7},
    {"_EPPS_dG1alt_logistic_rcpp", (DL_FUNC) &_EPPS_dG1alt_logistic_rcpp, 8},
    {"_EPPS_lpLalt_logistic_rcpp", (DL_FUNC) &_EPPS_lpLalt_logistic_rcpp, 8},
    {"_EPPS_eXsq_rcpp", (DL_FUNC) &_EPPS_eXsq_rcpp, 1},
    {"_EPPS_eXsq_w_rcpp", (DL_FUNC) &_EPPS_eXsq_w_rcpp, 2},
    {"_EPPS_Xsq_lowtri_rcpp", (DL_FUNC) &_EPPS_Xsq_lowtri_rcpp, 1},
    {"_EPPS_twoXYsym_lowtri_rcpp", (DL_FUNC) &_EPPS_twoXYsym_lowtri_rcpp, 2},
    {"_EPPS_ctingP_rcpp", (DL_FUNC) &_EPPS_ctingP_rcpp, 2},
    {"_EPPS_ctingP_uni_rcpp", (DL_FUNC) &_EPPS_ctingP_uni_rcpp, 2},
    {"_EPPS_pinv_rcpp", (DL_FUNC) &_EPPS_pinv_rcpp, 1},
    {"_EPPS_solve_rcpp", (DL_FUNC) &_EPPS_solve_rcpp, 2},
    {"_EPPS_inv_sympd_rcpp", (DL_FUNC) &_EPPS_inv_sympd_rcpp, 1},
    {"_EPPS_eigen_rcpp", (DL_FUNC) &_EPPS_eigen_rcpp, 1},
    {"_EPPS_chol_rcpp", (DL_FUNC) &_EPPS_chol_rcpp, 1},
    {"_EPPS_GroupSum_rcpp", (DL_FUNC) &_EPPS_GroupSum_rcpp, 2},
    {"_EPPS_countAinB_rcpp", (DL_FUNC) &_EPPS_countAinB_rcpp, 2},
    {"_EPPS_countAinB_W_rcpp", (DL_FUNC) &_EPPS_countAinB_W_rcpp, 3},
    {"_EPPS_rankAinB_rcpp", (DL_FUNC) &_EPPS_rankAinB_rcpp, 2},
    {"_EPPS_outer_minus_rcpp", (DL_FUNC) &_EPPS_outer_minus_rcpp, 2},
    {"_EPPS_outer_plus_rcpp", (DL_FUNC) &_EPPS_outer_plus_rcpp, 2},
    {"_EPPS_outer_leq_rcpp", (DL_FUNC) &_EPPS_outer_leq_rcpp, 2},
    {"_EPPS_outer_geq_rcpp", (DL_FUNC) &_EPPS_outer_geq_rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_EPPS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
